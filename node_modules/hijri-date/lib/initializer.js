'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DateConverter = require('./DateConverter');

var _StringDateParser = require('./StringDateParser');

var _StringDateParser2 = _interopRequireDefault(_StringDateParser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaultFormat = 'yyyy/mm/dd';
var defaultProps = {
  month: 1,
  date: 1,
  hours: 0,
  minutes: 0,
  seconds: 0,
  milliseconds: 0
};

var Initializer = function () {
  function Initializer() {
    _classCallCheck(this, Initializer);
  }

  _createClass(Initializer, null, [{
    key: 'initDefault',
    value: function initDefault() {
      return (0, _DateConverter.GregToHijri)(new Date());
    }
  }, {
    key: 'init_number',
    value: function init_number(number) {
      return (0, _DateConverter.GregToHijri)(new Date(number));
    }
  }, {
    key: 'init_number_number',
    value: function init_number_number(year, month) {

      return this.init_number_number_number(year, month, 1);
    }
  }, {
    key: 'init_number_number_number',
    value: function init_number_number_number() {
      return this.initFromNumbers.apply(this, arguments);
    }
  }, {
    key: 'init_number_number_number_number',
    value: function init_number_number_number_number() {
      return this.initFromNumbers.apply(this, arguments);
    }
  }, {
    key: 'init_number_number_number_number_number',
    value: function init_number_number_number_number_number() {
      return this.initFromNumbers.apply(this, arguments);
    }
  }, {
    key: 'init_number_number_number_number_number_number',
    value: function init_number_number_number_number_number_number() {
      return this.initFromNumbers.apply(this, arguments);
    }
  }, {
    key: 'init_number_number_number_number_number_number_number',
    value: function init_number_number_number_number_number_number_number() {
      return this.initFromNumbers.apply(this, arguments);
    }
  }, {
    key: 'init_string',
    value: function init_string() {
      return this.initFromStrings.apply(this, arguments);
    }
  }, {
    key: 'init_string_string',
    value: function init_string_string() {
      return this.initFromStrings.apply(this, arguments);
    }
  }, {
    key: 'init_object',
    value: function init_object(object) {
      return Object.assign({}, defaultProps, object);
    }
  }, {
    key: 'initFromNumbers',
    value: function initFromNumbers(year, month, date) {
      var hours = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var minutes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var _arguments = arguments;
      var seconds = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
      var milliseconds = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;

      Array.from(arguments).forEach(function (arg, index) {
        _arguments[index] = parseInt(arg);
      });

      return {
        year: year,
        month: month,
        date: date,
        hours: hours,
        minutes: minutes,
        seconds: seconds,
        milliseconds: milliseconds
      };
    }
  }, {
    key: 'initFromStrings',
    value: function initFromStrings(dateString) {
      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultFormat;

      var props = {};
      props.year = _StringDateParser2.default.extractYear(dateString, format);
      props.month = _StringDateParser2.default.extractMonth(dateString, format);
      props.date = _StringDateParser2.default.extractDate(dateString, format);
      return Object.assign({}, defaultProps, props);
    }
  }]);

  return Initializer;
}();

Initializer.defaultFormat = defaultFormat;

exports.default = Initializer;