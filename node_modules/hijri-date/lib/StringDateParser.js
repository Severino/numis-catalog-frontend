'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var StringDateParser = function () {
  function StringDateParser() {
    _classCallCheck(this, StringDateParser);
  }

  _createClass(StringDateParser, null, [{
    key: 'extract',
    value: function extract(string, format, formatChunk) {
      var ignoreCase = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

      var targetFormat = ignoreCase ? format.toLowerCase() : format;
      if (targetFormat.includes(formatChunk)) {
        return parseInt(string.substr(targetFormat.indexOf(formatChunk), formatChunk.length));
      }
    }
  }, {
    key: 'extractYear',
    value: function extractYear(dateString, format) {
      var year = this.extract.apply(this, Array.prototype.slice.call(arguments).concat(['yyyy']));
      if (!year) {
        year = this.extract.apply(this, Array.prototype.slice.call(arguments).concat(['yy']));
        if (year) year = Number('14' + year);
      }
      return year;
    }
  }, {
    key: 'extractMonth',
    value: function extractMonth(dateString, format) {
      var month = this.extract.apply(this, Array.prototype.slice.call(arguments).concat(['mm', false]));
      if (month) return month;
      return 1;
    }
  }, {
    key: 'extractDate',
    value: function extractDate(dateString, format) {
      var date = this.extract.apply(this, Array.prototype.slice.call(arguments).concat(['dd', false]));
      if (date) return date;
      return 1;
    }
  }, {
    key: 'extractHours',
    value: function extractHours(dateString, format) {
      var hours = this.extract.apply(this, Array.prototype.slice.call(arguments).concat(['hh']));
      if (hours) return hours;
      return 0;
    }
  }, {
    key: 'extractMinutes',
    value: function extractMinutes(dateString, format) {
      var minutes = this.extract.apply(this, Array.prototype.slice.call(arguments).concat(['MM', false]));
      if (minutes) return minutes;
      return 0;
    }
  }, {
    key: 'extractSeconds',
    value: function extractSeconds(dateString, format) {

      var seconds = this.extract.apply(this, Array.prototype.slice.call(arguments).concat(['ss', false]));
      if (seconds) return seconds;
      return 0;
    }
  }, {
    key: 'extractMilliseconds',
    value: function extractMilliseconds(dateString, format) {

      var milliseconds = this.extract.apply(this, Array.prototype.slice.call(arguments).concat(['SS', false]));
      if (milliseconds) return milliseconds;
      return 0;
    }
  }]);

  return StringDateParser;
}();

exports.default = StringDateParser;