'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dateProps = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DateConverter = require('./DateConverter');

var _initializer = require('./initializer');

var _initializer2 = _interopRequireDefault(_initializer);

var _FormatDate = require('./FormatDate');

var _FormatDate2 = _interopRequireDefault(_FormatDate);

var _locales = require('./locales');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HijriDate = function () {
  function HijriDate() {
    _classCallCheck(this, HijriDate);

    return this.init.apply(this, arguments);
  }

  _createClass(HijriDate, [{
    key: 'init',
    value: function init() {
      var _this = this;

      var props = {};
      if (!arguments.length) {
        props = _initializer2.default.initDefault();
      } else {
        try {
          var methodNameSuffix = Array.from(arguments).map(function (arg) {
            return typeof arg === 'undefined' ? 'undefined' : _typeof(arg);
          }).join('_');
          props = _initializer2.default['init_' + methodNameSuffix].apply(_initializer2.default, arguments);
        } catch (e) {
          throw new TypeError(hijriTypeErrorMessage + '\n--- Details:\n' + e);
        }
      }

      Object.keys(props).forEach(function (prop) {
        _this['_' + prop] = props[prop];
      });
      this.__proxy__ = (0, _DateConverter.HijriToGreg)(this);
      this.initDayOfWeek();
      return this;
    }
  }, {
    key: 'initDayOfWeek',
    value: function initDayOfWeek() {
      if (!this.__proxy__) return;
      this._day = this._day || this.__proxy__.getDay();
      this._dayName = this._dayName || (0, _DateConverter.weekDay)(this._day);
    }
  }, {
    key: 'getFullYear',
    value: function getFullYear() {
      return this.year;
    }
  }, {
    key: 'getMonthIndex',
    value: function getMonthIndex() {
      return this.month - 1;
    }
  }, {
    key: 'getMonth',
    value: function getMonth() {
      return this.month;
    }
  }, {
    key: 'getDate',
    value: function getDate() {
      return this.date;
    }
  }, {
    key: 'getDay',
    value: function getDay() {
      return this.day;
    }
  }, {
    key: 'getHours',
    value: function getHours() {
      return this.hours;
    }
  }, {
    key: 'getMinutes',
    value: function getMinutes() {
      return this.minutes;
    }
  }, {
    key: 'getSeconds',
    value: function getSeconds() {
      return this.seconds;
    }
  }, {
    key: 'getMilliseconds',
    value: function getMilliseconds() {
      return this.milliseconds;
    }
  }, {
    key: 'getTime',
    value: function getTime() {
      return this.time;
    }
  }, {
    key: 'getTimezoneOffset',
    value: function getTimezoneOffset() {
      return this.timezoneOffset;
    }
  }, {
    key: 'addDay',
    value: function addDay() {
      return this.addHours(24);
    }
  }, {
    key: 'addDays',
    value: function addDays(days) {
      var _this2 = this;

      if (typeof days === 'number') Array.from({
        length: days
      }, function (v, k) {
        return k + 1;
      }).forEach(function (i) {
        return _this2.addDay();
      });
      return this;
    }
  }, {
    key: 'addHours',
    value: function addHours(n) {
      return this.addMinutes(n * 60);
    }
  }, {
    key: 'addMinutes',
    value: function addMinutes(n) {
      return this.addSeconds(n * 60);
    }
  }, {
    key: 'addSeconds',
    value: function addSeconds(n) {
      return this.addMilliseconds(1000 * n);
    }
  }, {
    key: 'addMilliseconds',
    value: function addMilliseconds(n) {
      this.time += n;
      return this;
    }
  }, {
    key: 'subtractDays',
    value: function subtractDays(days) {
      var _this3 = this;

      Array.from({
        length: days
      }, function (v, k) {
        return k + 1;
      }).forEach(function (i) {
        return _this3.subtractDay();
      });
      return this;
    }
  }, {
    key: 'subtractDay',
    value: function subtractDay() {
      return this.subtractHours(24);
    }
  }, {
    key: 'subtractHours',
    value: function subtractHours(n) {
      return this.subtractMinutes(n * 60);
    }
  }, {
    key: 'subtractMinutes',
    value: function subtractMinutes(n) {
      return this.subtractSeconds(n * 60);
    }
  }, {
    key: 'subtractSeconds',
    value: function subtractSeconds(n) {
      return this.subtractMilliseconds(1000 * n);
    }
  }, {
    key: 'subtractMilliseconds',
    value: function subtractMilliseconds(n) {
      return this.addMilliseconds(-n);
    }
  }, {
    key: 'updateProxy',
    value: function updateProxy() {
      this.__proxy__ = (0, _DateConverter.HijriToGreg)(this);
      return this;
    }
  }, {
    key: 'toGregorian',
    value: function toGregorian() {
      return this.__proxy__;
    }
  }, {
    key: 'format',
    value: function format(mask, options) {
      return _FormatDate2.default.apply(undefined, [this].concat(Array.prototype.slice.call(arguments)));
    }
  }, {
    key: 'ignoreTime',
    value: function ignoreTime() {
      this.hours = 0;
      this.minutes = 0;
      this.seconds = 0;
      this.milliseconds = 0;
      this.updateProxy();
      return this;
    }
  }, {
    key: 'clone',
    value: function clone() {
      return new HijriDate(this.time);
    }
  }, {
    key: 'is',
    value: function is() {
      var _arguments = arguments,
          _this4 = this;

      if (!arguments.length) throw new Error('function cannot be called without arguments');
      if (arguments.length === 1 && _typeof(arguments[0]) === 'object' && Object.keys(arguments[0]).length) return Object.keys(arguments[0]).every(function (prop) {
        return parseInt(_arguments[0][prop]) === parseInt(_this4[prop]);
      });
      return Array.from(arguments).every(function (arg, i) {
        return arg === _this4[dateProps[i]];
      });
    }
  }, {
    key: 'isToday',
    value: function isToday() {
      return HijriDate.today().time == this.clone().ignoreTime().time;
    }
  }, {
    key: 'isYesterday',
    value: function isYesterday() {
      return HijriDate.yesterday().time == this.clone().ignoreTime().time;
    }
  }, {
    key: 'isTomorrow',
    value: function isTomorrow() {
      return HijriDate.tomorrow().time == this.clone().ignoreTime().time;
    }
  }, {
    key: 'valueOf',
    value: function valueOf() {
      return this.getTime();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.format('default');
    }
  }, {
    key: 'year',
    get: function get() {
      return this._year;
    },
    set: function set(newYear) {
      this._year = newYear;
      this.updateProxy();
    }
  }, {
    key: 'month',
    get: function get() {
      return this._month;
    },
    set: function set(newMonth) {
      this._month = newMonth;
      this.updateProxy();
    }
  }, {
    key: 'date',
    get: function get() {
      return this._date;
    },
    set: function set(newDate) {
      this._date = newDate;
      this.updateProxy();
    }
  }, {
    key: 'time',
    get: function get() {
      return this.__proxy__.getTime();
    },
    set: function set(newTime) {
      var _this5 = this;

      var props = _initializer2.default.init_number(newTime);
      Object.keys(props).forEach(function (prop) {
        _this5['_' + prop] = props[prop];
      });
      this.__proxy__ = new Date(newTime);
    }
  }, {
    key: 'hours',
    get: function get() {
      return this._hours || 0;
    },
    set: function set(hours) {
      this._hours = hours;
      this.updateProxy();
    }
  }, {
    key: 'minutes',
    get: function get() {
      return this._minutes || 0;
    },
    set: function set(minutes) {
      this._minutes = minutes;
      this.updateProxy();
    }
  }, {
    key: 'seconds',
    get: function get() {
      return this._seconds || 0;
    },
    set: function set(seconds) {
      this._seconds = seconds;
      this.updateProxy();
    }
  }, {
    key: 'milliseconds',
    get: function get() {
      return this._milliseconds || 0;
    },
    set: function set(milliseconds) {
      this._milliseconds = milliseconds;
      this.updateProxy();
    }
  }, {
    key: 'timezoneOffset',
    get: function get() {
      return this.__proxy__.getTimezoneOffset();
    }
  }, {
    key: 'day',
    get: function get() {
      return this._day;
    }
  }, {
    key: 'dayName',
    get: function get() {
      return this._dayName;
    }
  }], [{
    key: 'now',
    value: function now() {
      return Date.now();
    }
  }, {
    key: 'today',
    value: function today() {
      return new HijriDate().ignoreTime();
    }
  }, {
    key: 'yesterday',
    value: function yesterday() {
      return this.today().subtractDay();
    }
  }, {
    key: 'tomorrow',
    value: function tomorrow() {
      return this.today().addDay();
    }
  }]);

  return HijriDate;
}();

HijriDate.locales = {
  ar: _locales.ar,
  en: _locales.en
};
HijriDate.defaultLocale = 'ar';

var hijriTypeErrorMessage = '\n  Wrong call of constructor !\n  Please, try to use of the following constructors:\n    \u21E2 new HijriDate() ; //current date\n      or\n    \u21E2 new HijriDate(year, month, day [, hour][, minutes][, seconds][, milliseconds]);\n         .i.e: new HijriDate(1438, 12, 23)\n      or\n    \u21E2 new HijriDate(date[, format])\n         .i.e: new HijriDate(\'1438-12-23\', \'yyyy-mm-dd\')\n  ';

var dateProps = exports.dateProps = ['year', 'month', 'date', 'hours', 'minutes', 'seconds', 'milliseconds'];
exports.default = HijriDate;